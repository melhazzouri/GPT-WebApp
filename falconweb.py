# -*- coding: utf-8 -*-
"""FalconWeb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LESEL6OZ-wWnLBRwWFLdd0718fPf1iKY

# Install Dependencies
"""

!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu117 --upgrade

!pip install langchain einops accelerate transformers bitsandbytes

!pip install langchain_community

"""# Import Dependencies"""

from langchain import HuggingFacePipeline
from langchain import PromptTemplate,  LLMChain
from transformers import AutoTokenizer, AutoModelForCausalLM
import transformers
import os
import torch

# Check if cuda is available
torch.cuda.is_available()

"""# Build the Pipeline"""

# Define Model ID
model_id = "tiiuae/falcon-40b-instruct"
# Load Tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_id)
# Load Model
model = AutoModelForCausalLM.from_pretrained(model_id, cache_dir='./workspace/',
    torch_dtype=torch.bfloat16, trust_remote_code=True, device_map="auto", offload_folder="offload")
# Set PT model to inference mode
model.eval()
# Build HF Transformers pipeline
pipeline = transformers.pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    device_map="auto",
    max_length=400,
    do_sample=True,
    top_k=10,
    num_return_sequences=1,
    eos_token_id=tokenizer.eos_token_id
)

# Test out the pipeline
pipeline('who is kim kardashian?')

"""# Pass it to Langchain"""

# Setup prompt template
template = PromptTemplate(input_variables=['input'], template='{input}')
# Pass hugging face pipeline to langchain class
llm = HuggingFacePipeline(pipeline=pipeline)
# Build stacked LLM chain i.e. prompt-formatting + LLM
chain = LLMChain(llm=llm, prompt=template)

# Test LLMChain
response = chain.run('who is kim kardashian?')

"""# Build Gradio App"""

# Install Gradio for the UI component
!pip install gradio

# Import gradio for UI
import gradio as gr

# Create generate function - this will be called when a user runs the gradio app
def generate(prompt):
    # The prompt will get passed to the LLM Chain!
    return chain.run(prompt)
    # And will return responses

# Define a string variable to hold the title of the app
title = 'ü¶úüîó Falcon-40b-Instruct'
# Define another string variable to hold the description of the app
description = 'This application demonstrates the use of the open-source `Falcon-40b-Instruct` LLM.'
# pls subscribe üôè

# Build gradio interface, define inputs and outputs...just text in this
gr.Interface(fn=generate, inputs=["text"], outputs=["text"],
             # Pass through title and description
             title=title, description=description,
             # Set theme and launch parameters
             theme='finlaymacklon/boxy_violet').launch(server_port=8080, share=True)